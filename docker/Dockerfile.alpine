#########################################################################################
#
# P R O D U C T I O N    R E A D Y
#
# Docker container fully based on Alpine Linux: contained PLAST software compiled
# using native Alpine c/c++ tools.
#
#########################################################################################
#
# == Docker build command:
#
#    docker build -f Dockerfile.alpine -t plast_alpine_machine .
#
# == Running a PLAST job
#
#    docker run --rm -i -t plast_alpine_machine <args>
#
#    where <args> are the PLAST command-line arguments.
#    See https://plast.inria.fr/user-guide/plast-command-line-arguments/
#
# == Sample PLAST job with provided data
#
#    docker run --rm -i -t -v $PWD:/tmp plast_alpine_machine -p plastp -i /opt/plastbinary/db/query.fa -d /opt/plastbinary/db/query.fa -o /tmp/test.out -a 4
#
#    -> you should have a 'test.out' file when PLAST job is done.
#
#    This command-line line explained:
#
#    docker run                            [1]
#       --rm                               [2]
#       -i -t                              [3]
#       -v $PWD:/tmp                       [4]
#       plast_machine                      [5] 
#       -p plastp                          [6]
#       -i /opt/plastbinary/db/query.fa    [7] 
#       -d /opt/plastbinary/db/tursiops.fa [8]
#       -o /tmp/test.out                   [9]
#       -a 4                               [10]
#
#       [1]-[5]: Docker arguments
#       [6]-[10]: PLAST arguments
#
#       [1]: start Docker container
#       [2]: destroy container when Docker finishes
#            (it does NOT delete the 'plast_machine' image)
#       [3]: start an interactive job 
#            (for instance, you'll see messages on stdout, if any)
#       [4]: mount a volume. This is required to get the results from PLAST.
#            Here, we say that current local directory will be viewed as '/tmp'
#            from the inside of the container. 
#       [5]: tell Docker which image to start: the 'plast_machine' of course.
#       [6]: run a plastp job, i.e. protein query vs. protein reference bank
#       [7]: the query; this file is provided inside the container.
#       [8]: the reference bank; this file is provided inside the container.
#       [9]: the result file. 
#            Created within the '/tmp' directory inside the container, this file
#            will be available in the current local directory, thanks to argument [4].
#       [10]: request to use up to 4 threads
#            (adapt the value to your computer!)
#
#########################################################################################

FROM alpine:3.6
# (image size after: 4Mb)

# who to blame?
MAINTAINER Patrick Durand patrick.durand@inria.fr

# ###
#     Package installation and configuration
#
RUN apk update && \
    apk add --no-cache libstdc++ && \
    mkdir -p /opt
# (image size after: 6.5Mb)

# ###
#     PLAST tarball is supposed to be located in this directory.
#
ENV PLAST_VERSION=2.3.2
ENV PLAST_PACKAGE=plastbinary_v${PLAST_VERSION}-Alpine
COPY ${PLAST_PACKAGE}.tar.gz /opt

# ###
#     PLAST installation.
#
RUN cd /opt \
    && gunzip ${PLAST_PACKAGE}.tar.gz \
    && tar -xf ${PLAST_PACKAGE}.tar \
    && rm -f ${PLAST_PACKAGE}.tar \
    && mv ${PLAST_PACKAGE} plastbinary 
# (image size after: 9.6Mb)

# ###
#     Start a GATB-Tool. See "run-tool.sh" header for more information.
#
ENTRYPOINT ["/opt/plastbinary/plast"]

